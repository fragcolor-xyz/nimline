variables:
  GIT_SUBMODULE_STRATEGY: recursive
  
test:linux:
  script:
    - docker build -t nimline-test --build-arg USER_ID=`id -u` --build-arg GROUP_ID=`id -g` .
    - docker run --rm -t -u`id -u`:`id -g` nimline-test:latest nim cpp --cincludes:./tests -r nimline.nim
    - docker run --rm -t -u`id -u`:`id -g` nimline-test:latest nim cpp --cincludes:./tests -r --cc:clang nimline.nim
  tags:
    - DOCKER, LINUX

test:windows:
  before_script:
    - "echo off"
    - 'call C:\BuildTools\Common7\Tools\VsDevCmd.bat -arch=amd64'
    - 'call C:\ProgramData\Miniconda3\Scripts\activate.bat C:\ProgramData\Miniconda3'
  script:
    - cmd /C conda create -n nimline_testing -c fragcolor nim
    - IF %errorlevel% NEQ 0 exit /b %errorlevel%
    - cmd /C conda activate nimline_testing # it seems we need to do this to actually prepare the env properly?
    - set CONDA_FRAG=C:\ProgramData\Miniconda3\envs\nimline_testing
    - set PATH=%PATH%;%CONDA_FRAG%\bin
    - nim cpp --cc:vcc --cincludes:. -r nimline.nim
  after_script:
    # Recycle space - should keep latest pkg on branch
    - 'call C:\ProgramData\Miniconda3\Scripts\activate.bat C:\ProgramData\Miniconda3'
    - conda clean -y --all
    - conda env remove -n nimline_testing
  tags:
    - WIN, CONDA

test:macos:
  stage: test
  before_script:
    - conda env remove -n nimline_testing || true
  script:
    - export MACOSX_DEPLOYMENT_TARGET=10.13
    - conda create -n nimline_testing -c fragcolor nim
    - export PATH="$PATH:$HOME/miniconda3/envs/nimline_testing/bin"
    - nim cpp --passC:-std=c++14 --cincludes:. -r nimline.nim
  after_script:
    # Recycle space - should keep latest pkg on branch
    - conda clean -y --all
    - conda env remove -n nimline_testing || true
  tags:
    - MACOS, CONDA
